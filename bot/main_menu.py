
from aiogram import types, Router, filters, F
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.utils.i18n import gettext as _, lazy_gettext as __
from aiogram.fsm.context import FSMContext

from bot.core.states import Setup
from bot.core.storage import main_storage as storage


main_menu_router = Router()


@main_menu_router.message(filters.command.CommandStart())
async def start_msg(message: types.Message, state: FSMContext):
    if not await storage.find_user(message.from_user.id):
        user = message.from_user
        await storage.add_user(user.id, user.first_name, user.last_name, user.username, user.language_code)

    await send_custom_welcome_message(message)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:",
                         reply_markup=ReplyKeyboardBuilder()
                         .button(text='üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞').button(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π').button(text='üá∫üá∏ English').as_markup(resize_keyboard=True))

    await state.set_state(Setup.choosing_lang)


@main_menu_router.message(Setup.choosing_lang)
async def set_lang(message: types.Message, state: FSMContext):
    lang = message.text
    if '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞' in lang.lower():
        lang = 'uk'
    elif '—Ä—É—Å—Å–∫–∏–π' in lang.lower():
        lang = 'ru'
    elif 'english' in lang.lower():
        lang = 'en'
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –º–æ–≤–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —è–∑—ã–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    await storage.set_lang(message.from_user.id, lang)
    await show_menu(message, state)


@main_menu_router.message(F.text == __('üè† –í –º–µ–Ω—é'))
async def show_menu(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    kb.button(text=_('‚úÖÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ FB –∞–∫–∞—É–Ω—Ç–∏ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è'))
    kb.button(text=_('üîí 2fa –∫–æ–¥'))
    kb.button(text=_('üìπ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ –∑ TikTok'))
    kb.button(text=_('üì± –î–æ–¥–∞—Ç–∫–∏ Google Play'))
    kb.button(text=_('üÜî –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID'))
    kb.button(text=_('üï∂Ô∏è –£–Ω—ñ–∫–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ'))
    kb.button(text=_('üöÄ –§–∞—Ä–º–µ—Ä–∞–º'))
    kb.button(text=_('ü§≥ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ–ª—Ñ—ñ'))
    kb.button(text=_('üìù –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ë–ú (—É–∫—Ä.)'))
    kb.button(text=_('üìù –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è TikTok (–±—ñ–∑–Ω–µ—Å –∞–∫–∫.)'))
    kb.adjust(2)

    await message.answer(_('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:'), reply_markup=kb.as_markup(resize_keyboard=True))
    await state.clear()


async def send_custom_welcome_message(message: types.Message):
    url_kb = None

    welcome_message = await storage.get_start_msg()
    welcome_text = welcome_message.welcome_text if welcome_message else None
    welcome_media_id = welcome_message.welcome_media_id if welcome_message else None
    welcome_links = welcome_message.welcome_links if welcome_message else None

    if not welcome_text and not welcome_media_id:
        return

    if welcome_links:
        url_kb = InlineKeyboardBuilder()
        for link in welcome_links.split('\n'):
            url_kb.button(text=link.rsplit(' ', 1)[0], url=link.rsplit(' ', 1)[1])
        url_kb.adjust(1)

    if welcome_media_id and url_kb:
        media_type = welcome_media_id.split(' ')[0]
        media_id = welcome_media_id.split(' ')[1]
        if media_type == 'photo':
            await message.answer_photo(photo=media_id, caption=welcome_text, reply_markup=url_kb.as_markup())
        elif media_type == 'video':
            await message.answer_video(video=media_id, caption=welcome_text, reply_markup=url_kb.as_markup())
    elif url_kb:
        await message.answer(welcome_text, reply_markup=url_kb.as_markup())
    elif welcome_media_id:
        media_type = welcome_media_id.split(' ')[0]
        media_id = welcome_media_id.split(' ')[1]
        if media_type == 'photo':
            await message.answer_photo(photo=media_id, caption=welcome_text)
        elif media_type == 'video':
            await message.answer_video(video=media_id, caption=welcome_text)
    else:
        await message.answer(welcome_text)